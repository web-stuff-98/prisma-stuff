// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTES
// If you want to be able to use anything in a search, you have to include it in @@unique

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id           String          @id @default(cuid())
  title        String
  content      String
  description  String
  slug         String
  published    Boolean         @default(false)
  imagePending Boolean         @default(true) @map("image_pending")
  createdAt    DateTime        @default(now())
  author       User            @relation(fields: [authorId], references: [id])
  authorId     String
  blur         String?
  tags         Tag[]
  comments     CommentOnPost[]
  shares       SharesOnPost[]
  likes        LikesOnPost[]

  @@unique([slug])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model SharesOnPost {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model LikesOnPost {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model CommentOnPost {
  id                   String                 @id @default(cuid())
  comment              String
  Post                 Post                   @relation(fields: [postId], references: [id])
  postId               String
  User                 User                   @relation(fields: [userId], references: [id])
  userId               String
  createdAt            DateTime               @default(now())
  CommentOnPostComment CommentOnPostComment[]
}

model CommentOnPostComment {
  id            String        @id @default(cuid())
  comment       String
  commentedOn   CommentOnPost @relation(fields: [commentedOnId], references: [id])
  commentedOnId String
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])
  userId        String

  @@index([id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                 @id @default(cuid())
  name               String?
  email              String?                @unique
  emailVerified      DateTime?
  role               Role                   @default(USER)
  image              String?
  posts              Post[]
  accounts           Account[]
  sessions           Session[]
  shares             SharesOnPost[]
  likes              LikesOnPost[]
  commentsOnComments CommentOnPostComment[]
  comments           CommentOnPost[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
