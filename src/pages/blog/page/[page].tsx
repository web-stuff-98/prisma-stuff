import type { GetServerSideProps, GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useRef } from "react";
import Post, { IPost } from "../../../components/post/Post";

import { useEffect, useState } from "react";
import { useUsers } from "../../../context/UsersContext";
import { useFilter } from "../../../context/FilterContext";
import Link from "next/link";

const Page = ({
  feed,
  popular,
  pageCount,
  fullCount,
  maxPage,
}: {
  feed: any[];
  popular: any[];
  pageCount: number;
  fullCount: number;
  maxPage: number;
}) => {
  const { cacheProfileDataForUser } = useUsers();
  const { setPageCount, setFullCount, setMaxPage } = useFilter();

  useEffect(() => {
    if (!feed) return;
    setFullCount(fullCount);
    setPageCount(pageCount);
    setMaxPage(maxPage);
    let uids: string[] = [];
    for (const post of feed) {
      if (!uids.includes(post.author.id)) uids.push(post.author.id);
    }
    for (const uid of uids) {
      cacheProfileDataForUser(uid);
    }
  }, [feed]);

  const asideRootRef = useRef<HTMLDivElement>(null);
  const [asideClientWidth, setAsideClientWidth] = useState(126);

  useEffect(() => {
    if (!asideRootRef.current) return;
    const resized = () => {
      if (asideRootRef.current)
        setAsideClientWidth(asideRootRef.current?.clientWidth);
    };
    resized();
    window.addEventListener("resize", resized);
    return () => {
      window.removeEventListener("resize", resized);
    };
  }, [asideRootRef.current]);

  return (
    <div className="flex relative justify-between w-full mx-auto pr-2 py-2">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-4/6 h-full">
        {feed.map((post: any, i: number) => (
          <Post reverse={Boolean(i % 2)} key={post.id} post={post} />
        ))}
      </div>
      <div ref={asideRootRef} className="w-2/6">
        <aside
          style={{ width: `${asideClientWidth}px` }}
          className="fixed py-2"
        >
          <div className="flex flex-col max-h-asideMaxHeight sm:overflow-y-auto shadow-sm rounded border sm:h-full gap-2 dark:border-zinc-800 pb-1">
            <h2
              style={{ lineHeight: "1" }}
              className="font-sm font-ArchivoBlack py-2 sm:py-0 sm:pt-1 mx-auto"
            >
              Popular
            </h2>
            {popular &&
              popular.map((post: IPost) => (
                <Link key={post.id} href={`/blog/post/${post.slug}`}>
                  <article
                    style={{ lineHeight: "1" }}
                    className="text-xs dark:hover:bg-zinc-800 hover:bg-gray-100 mx-1 rounded cursor-pointer flex flex-col"
                  >
                    <p>
                      <b>{post.title}</b> - by {post.author.name}
                    </p>
                  </article>
                </Link>
              ))}
          </div>
        </aside>
      </div>
    </div>
  );
};

import getPage from "../../../utils/getPage";

export const getServerSideProps: GetServerSideProps = async ({
  params,
  query,
}: GetServerSidePropsContext) => {
  /* The users parsed query parameters. Stored as keyname on redis so cached props can be looked up */
  //@ts-ignore
  const { props } = await getPage(prisma, {rawTags:query.tags || "", rawTerm: query.term || ""}, params)
  return { props }
};

export default Page;
