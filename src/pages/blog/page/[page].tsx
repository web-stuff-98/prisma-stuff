import type { GetServerSideProps, GetStaticProps } from 'next'
import Head from 'next/head'
import Post from '../../../components/post/Post';

import prisma from '../../../lib/prisma'

import { useEffect } from "react"
import { useUsers } from '../../../context/UsersContext';

export const getServerSideProps: GetServerSideProps = async ({ params, query }) => {
  const { tags: rawTags } = query
  const numPerPage = 20
  const pageOffset = Number((Math.max(Number(params?.page) - 1, 0)) * numPerPage)
  const tags = String(rawTags).toLowerCase().split(" ").filter((tag: string) => tag !== "").map((tag: string) => tag.replace(/[^\w-]+/g, ''))

  let feedQ
  if (tags.length === 0)
    feedQ = await prisma.post.findMany({
      where: { published: true, imagePending: false, },
      include: {
        author: { select: { id: true }, },
        tags: true,
        shares: true,
        likes: true
      },
      orderBy: { createdAt: "desc" },
      skip: pageOffset,
      take: numPerPage
    });
  else
    feedQ = await prisma.post.findMany({
      where: { published: true, imagePending: false, tags: { some: { name: { in: tags } } } },
      include: {
        author: { select: { id: true }, },
        tags: true,
        shares: true,
        likes: true
      },
      orderBy: { createdAt: "desc" },
      skip: pageOffset,
      take: numPerPage
    });
  const feed = feedQ.map((data: any) => ({
    ...data,
    tags: data.tags.map((tag: any) => tag.name),
  }))
  // recommended section here when you have enough posts to test it out properly
  return {
    props: { feed: JSON.parse(JSON.stringify(feed)) },
  };
};

const Page = ({ feed }: { feed: any[] }) => {
  const { cacheProfileDataForUser } = useUsers()

  useEffect(() => {
    if (!feed) return
    feed.forEach((post: any) => cacheProfileDataForUser(post.author.id))
  }, [feed])

  return (
    <div className='flex flex-col justify-between w-full mx-auto p-2'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <aside className='w-full gap-4 items-center h-40 flex justify-evenly'>
        <article className='w-1/3'>
          <div className='w-full h-20 bg-stone-200 rounded' />
          <h3 className='text-center text-xl'>Title placeholder content</h3>
          <p className='text-center text-xs'>illo debitis provident dolore quod nihil at hic ratione esse! Voluptates sit quo perferendis</p>
        </article>
        <article className='w-1/3'>
          <div className='w-full h-20 bg-stone-200 rounded' />
          <h3 className='text-center text-xl'>Title placeholder content</h3>
          <p className='text-center text-xs'>illo debitis provident dolore quod nihil at hic ratione esse! Voluptates sit quo perferendis</p>
        </article>
        <article className='w-1/3'>
          <div className='w-full h-20 bg-stone-200 rounded' />
          <h3 className='text-center text-xl'>Title placeholder content</h3>
          <p className='text-center text-xs'>illo debitis provident dolore quod nihil at hic ratione esse! Voluptates sit quo perferendis</p>
        </article>
      </aside>
      <hr />
      <div className='w-full h-full gap-2'>
        {feed.map((post: any) => <Post key={post.id} post={post} />)}
      </div>
    </div>
  )
}

export default Page
