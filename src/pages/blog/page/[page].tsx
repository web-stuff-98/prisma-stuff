import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import Post, { IPost } from '../../../components/post/Post';

import prisma from '../../../lib/prisma'

import { useEffect } from "react"
import { useUsers } from '../../../context/UsersContext';
import { useFilter } from '../../../context/FilterContext';
import Link from 'next/link';

export const getServerSideProps: GetServerSideProps = async ({ params, query }) => {
  const { tags: rawTags } = query
  const numPerPage = 20
  const pageOffset = Number((Math.max(Number(params?.page) - 1, 0)) * numPerPage)
  const tags = rawTags ? String(rawTags).toLowerCase().split(" ").filter((tag: string) => tag.trim() !== "").map((tag: string) => tag.replace(/[^\w-]+/g, '')) : []

  const feedQ = await prisma.post.findMany({
    where: { published: true, imagePending: false, ...(rawTags ? { tags: { some: { name: { in: tags } } } } : {}) },
    include: {
      author: { select: { id: true }, },
      tags: true,
      shares: true,
      likes: true
    },
    orderBy: { createdAt: "desc" },
    skip: pageOffset,
    take: numPerPage
  });
  // doing 2 queries i know........... need to count the total number of posts for display without pagination.
  const feedQ_count = await prisma.post.findMany({
    where: { published: true, imagePending: false, ...(rawTags ? { tags: { some: { name: { in: tags } } } } : {}) },
    select: { id:true }
  })
  const feed = feedQ.map((data: any) => ({
    ...data,
    tags: data.tags.map((tag: any) => tag.name),
  }))
  // recommended posts
  const recommended = await prisma.post.findMany({
    where: {
      published:true,
      imagePending:false,
    },
    select: {
      title:true,
      description:true,
      likes:true,
      shares:true,
      id:true,
      author: {
        select:{
          id:true,
          name:true
        }
      },
      slug:true
    },
    orderBy: {
      likes: {
        _count: 'desc'
      } 
    }
  })
  return {
    props: { 
      feed: JSON.parse(JSON.stringify(feed)),
      recommended,
      pageCount: feedQ.length,
      fullCount: feedQ_count.length,
      maxPage: Math.ceil(feedQ_count.length / 20)
     },
  };
};

const Page = ({ feed, recommended, pageCount, fullCount, maxPage }: { feed: any[], recommended:any[], pageCount: number, fullCount: number, maxPage: number }) => {
  const { cacheProfileDataForUser } = useUsers()
  const { searchTags, setPageCount, setFullCount, setMaxPage } = useFilter()

  useEffect(() => {
    if (!feed) return
    feed.forEach((post: any) => cacheProfileDataForUser(post.author.id))
  }, [feed])

  useEffect(() => {
    setFullCount(fullCount)
    setPageCount(pageCount)
    setMaxPage(maxPage)
    console.log(`Max page : ${maxPage}`)
  }, [feed])

  return (
    <div className='flex justify-between w-full mx-auto pr-2 py-2'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='w-4/6 h-full'>
        {feed.map((post: any, i:number) => <Post reverse={Boolean(i % 2)} key={post.id} post={post} />)}
      </div>
      <aside className='w-2/6 py-2 h-full'>
        <div className='flex flex-col rounded border gap-2 dark:border-zinc-800 pb-1'>
          <h2 style={{lineHeight:"1"}} className='font-sm md:font-bold py-2 mx-auto'>Recommended</h2>
          {recommended && recommended.map((post:IPost) => 
          <Link href={`/blog/post/${post.slug}`}>
          <article style={{lineHeight:"1"}} className='text-xs p-1 dark:hover:bg-zinc-800 hover:bg-gray-100 mx-1 rounded cursor-pointer flex flex-col'>
            <p>
              <b>
                {post.title}
              </b> - by {post.author.name}
            </p>
            </article>
            </Link>
            )}
        </div>
      </aside>
    </div>
  )
}

export default Page
