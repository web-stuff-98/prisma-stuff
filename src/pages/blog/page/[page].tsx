import type {
  GetServerSideProps,
  GetStaticPaths,
  GetStaticProps,
  GetStaticPropsContext,
} from 'next'
import Head from 'next/head'
import { useRef, forwardRef, ForwardedRef, useLayoutEffect } from 'react'
import type { RefObject } from 'react'
import Post, { IPost } from '../../../components/post/Post'

import prisma from '../../../lib/prisma'

import { useEffect, useState } from 'react'
import { useUsers } from '../../../context/UsersContext'
import { useFilter } from '../../../context/FilterContext'
import Link from 'next/link'
import { useRouter } from 'next/router'

const Page = ({
  feed,
  popular,
  pageCount,
  fullCount,
  maxPage,
}: {
  feed: any[]
  popular: any[]
  pageCount: number
  fullCount: number
  maxPage: number
}) => {
  const { cacheProfileDataForUser } = useUsers()
  const { setPageCount, setFullCount, setMaxPage } = useFilter()

  useEffect(() => {
    if (!feed) return
    feed.forEach((post: any) => cacheProfileDataForUser(post.author.id))
  }, [feed])

  useEffect(() => {
    setFullCount(fullCount)
    setPageCount(pageCount)
    setMaxPage(maxPage)
  }, [feed])

  const asideRootRef = useRef<HTMLDivElement>(null)
  const [asideClientWidth, setAsideClientWidth] = useState(126)

  useEffect(() => {
    if (!asideRootRef.current) return
    const resized = () => {
      if (asideRootRef.current)
        setAsideClientWidth(asideRootRef.current?.clientWidth)
    }
    resized()
    asideRootRef.current.addEventListener('resize', resized)
    asideRootRef.current.addEventListener('blur', resized)
    return () =>  { 
      asideRootRef.current?.removeEventListener('resize', resized)
      asideRootRef.current?.removeEventListener('blur', resized)
    }
  }, [asideRootRef.current])

  return (
    <div
      style={{ boxSizing: 'content-box' }}
      className="flex relative justify-between w-full mx-auto pr-2 py-2"
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-4/6 h-full">
        {feed.map((post: any, i: number) => (
          <Post reverse={Boolean(i % 2)} key={post.id} post={post} />
        ))}
      </div>
      <div ref={asideRootRef} className="w-2/6">
        <aside
        style={{ width: `${asideClientWidth}px` }}
          className="fixed py-2 h-full"
        >
          <div className="flex flex-col shadow-sm rounded border gap-2 dark:border-zinc-800 pb-1">
            <h2
              style={{ lineHeight: '1' }}
              className="font-sm md:font-bold py-2 mx-auto"
            >
              Popular
            </h2>
            {popular &&
              popular.map((post: IPost) => (
                <Link href={`/blog/post/${post.slug}`}>
                  <article
                    style={{ lineHeight: '1' }}
                    className="text-xs p-1 dark:hover:bg-zinc-800 hover:bg-gray-100 mx-1 rounded cursor-pointer flex flex-col"
                  >
                    <p>
                      <b>{post.title}</b> - by {post.author.name}
                    </p>
                  </article>
                </Link>
              ))}
          </div>
        </aside>
      </div>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async ({
  params,
  query,
}) => {
  const { tags: rawTags } = query
  const numPerPage = 20
  const pageOffset = Number(Math.max(Number(params?.page) - 1, 0) * numPerPage)
  const tags = rawTags
    ? String(rawTags)
        .toLowerCase()
        .split(' ')
        .filter((tag: string) => tag.trim() !== '')
        .map((tag: string) => tag.replace(/[^\w-]+/g, ''))
    : []

  const feedQ = await prisma.post.findMany({
    where: {
      published: true,
      imagePending: false,
      ...(rawTags ? { tags: { some: { name: { in: tags } } } } : {}),
    },
    include: {
      author: { select: { id: true } },
      tags: true,
      shares: true,
      likes: true,
    },
    orderBy: { createdAt: 'desc' },
    skip: pageOffset,
    take: numPerPage,
  })
  // doing 2 queries ........... need to count the total number of posts for display. havent looked hard for a better solution
  const feedQ_count = await prisma.post.findMany({
    where: {
      published: true,
      imagePending: false,
      ...(rawTags ? { tags: { some: { name: { in: tags } } } } : {}),
    },
    select: { id: true },
  })
  const feed = feedQ.map((data: any) => ({
    ...data,
    tags: data.tags.map((tag: any) => tag.name),
  }))
  // popular posts
  const popular = await prisma.post.findMany({
    where: {
      published: true,
      imagePending: false,
    },
    select: {
      title: true,
      description: true,
      likes: true,
      shares: true,
      id: true,
      author: {
        select: {
          id: true,
          name: true,
        },
      },
      slug: true,
    },
    orderBy: {
      likes: {
        _count: 'desc',
      },
    },
  })
  return {
    props: {
      feed: JSON.parse(JSON.stringify(feed)),
      popular,
      pageCount: feedQ.length,
      fullCount: feedQ_count.length,
      maxPage: Math.ceil(feedQ_count.length / 20),
    },
  }
}

export default Page
